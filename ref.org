* 1 Introduction
** 1.3 Conventions
*** 1.3.2 ~nil~ and ~t~
In Elisp, ~nil~ means:
1. a symbol with
2. logical truth value /false/
3. the emtpy list ~()~
#+BEGIN_QUOTE
When used as a variable, ~nil~ always has the value ~nil~.
#+END_QUOTE

To Lisp reader, ~()~ and ~nil~ are identical. But for human programmers, this is useful

#+BEGIN_SRC elisp
(cons 'foo ())                ; Emphasize the empty list
(setq foo-flag nil)           ; Emphasize the truth value false
#+END_SRC

#+BEGIN_QUOTE
In contexts where a truth value is expected, any non-~nil~ value is considered to be /true/. However, ~t~ is the preferred way to represent the truth value /true/.

When you need to choose a value that represents /true/, and there is no other basis for choosing, use ~t~.

The symbol t always has the value t.
#+END_QUOTE

#+BEGIN_SRC elisp
(booleanp t)   ;; t
(booleanp nil) ;; t
(booleanp 3)   ;; nil, because 3 is neither t nor nil
#+END_SRC
*** 1.3.3 Evaluation Notation
